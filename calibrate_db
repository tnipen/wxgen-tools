#!/usr/bin/env python
import os
import sys
import numpy as np
import argparse
import netCDF4
import shutil
import time
import datetime


""" Command-line interfact to calibrate function """
def main():
    parser = argparse.ArgumentParser(description='Calibrates a database such that all lead-times have the same climatology. Separate adjustment for each time of the day and for each gridpoint.')
    parser.add_argument('file', help='NetCDF database')
    parser.add_argument('-o', type=str, help="Output file", dest="ofile", required=True)
    parser.add_argument('-v', help='Which variables to calibrate?', dest="variables")
    parser.add_argument('-f', help='Overwrite output file if it already exists', dest="overwrite", action="store_true")
    parser.add_argument('-n', default=101, type=int, help='How many quantiles to store?', dest="num_quantiles")
    parser.add_argument('-os', help='Optimize for speed (instead of memory)', dest="optimized_speed", action="store_true")
    parser.add_argument('--debug', help='Show debug info', action="store_true")

    if len(sys.argv) == 1:
        parser.print_help()
        sys.exit(1)

    args = parser.parse_args()
    calibrate(**vars(args))


""" See command-line interfact above for description of each variable """
def calibrate(file, ofile, variables=None, overwrite=False, debug=False, num_quantiles=101, optimized_speed=False):
    """
    Which calibration function to use on each variable?
    """
    var2func = {"air_temperature_2m": quantile_mapping,
                "sea_level_pressure": addition,
                "cloud_area_fraction": quantile_mapping,
                "precipitation_amount_acc": quantile_mapping,
                "dew_point_temperature_2m": quantile_mapping}

    """
    List of accumulated variables. These are deaccumulated first, calibrated,
    then accumulated. Also, the first timestep is not calibrated nor used in
    the calibration since its value is always 0.
    """
    var_acc = ['precipitation_amount_acc']

    if file == ofile:
        print("Input file must be different than the output file")
        sys.exit()

    if overwrite or not os.path.exists(ofile):
        shutil.copy(file, ofile)
    ifile = netCDF4.Dataset(file, 'r')

    """
    Which variables to calibrate
    """
    if variables is None:
        list_of_non_variables = ["x", "y", "z", "crs", "forecast_is_complete", "latitude", "longitude", "time", "lead_time", "projection_regular_ll", "altitude"]
        vars = [var for var in ifile.variables if var not in list_of_non_variables]
    else:
        vars = variables.split(',')

    """
    Create a list of which times to use in the calibration
    """
    if "forecast_is_complete" in ifile.variables:
        Itime = np.where(ifile.variables["forecast_is_complete"][:] == 1)[0]
    else:
        Itime = range(len(ifile.variables["time"]))

    leadtimes = ifile.variables["lead_time"][:]
    LT = len(leadtimes)
    has_single_spatial_dim = "grid_point" in ifile.dimensions
    ofile = netCDF4.Dataset(ofile, 'a')
    for var in vars:
        print("Processing variable " + var)
        sys.stdout.flush()
        if var not in var2func:
            print("No calibration function for %s defined. Skipping." % var)
            ofile.variables[var].calibration = "None"
            continue

        if var in var_acc:
            Ileadtimes = range(1, len(leadtimes))
        else:
            Ileadtimes = range(len(leadtimes))
        func = var2func[var]

        """
        For each leadtime, find the leadtime to use as reference. This will
        be the earliest leadtime for the same time of day.
        """
        Irefs = [Ileadtimes[np.where(leadtimes[i] % 24 == leadtimes[Ileadtimes] % 24)[0][0]] for i in Ileadtimes]

        """
        Create calibration map of reference quantiles and forecast quantiles
        Resample the full QQ map to save memory and computation time
        """
        ncvar = ifile.variables[var]
        print("Allocating %.2f GB" % (np.product(ncvar.shape) * 4.0 / 1024 ** 3))
        data = ncvar[:]
        if has_single_spatial_dim:
            # time, lead_time, ens, point
            G = ncvar.shape[3]
        else:
            # time, lead_time, ens, lat, lon
            raise NotImplementedError
            Y = ncvar.shape[3]
            X = ncvar.shape[4]
        T = len(Itime)
        E = ncvar.shape[2]

        # Deaccumulate
        if var in var_acc:
            print("Deaccumulating")
            for i in range(data.shape[1]-1, 0, -1):
                data[:, i, ...] -= data[:, i-1, ...]

        qq_map = np.zeros([num_quantiles, LT, G])
        t0 = time.time()
        for i, Ileadtime in enumerate(Ileadtimes):
            q = np.reshape(data[Itime, Ileadtime, :, :], [T * E, G])
            q = np.sort(q, axis=0)
            # Resample the sorted array using a set of quantiles
            Iqq = [int(I) for I in np.linspace(0, T * E - 1, num_quantiles)]
            # print(i, np.mean(q[Iqq, :]))
            qq_map[:, Ileadtime, :] = q[Iqq, :]
        if debug:
            print("QQ map: %.1f" % (time.time() - t0))

        """
        Adjust forecast using the map
        """
        t0 = time.time()
        assert(len(Irefs) == len(Ileadtimes))
        shape = [data.shape[0], data.shape[2], data.shape[3]]
        accum = np.zeros(shape)
        t0 = time.time()
        for i, Ileadtime in enumerate(Ileadtimes):
            Iref = Irefs[i]
            #q = np.zeros(shape, float)
            if Ileadtime == Iref:
                # Don't calibrate if reference leadtime
                pass
            else:
                for g in range(G):
                    # Note: Only need to select Itime for the calibration part, not the output
                    values = func(data[:, Ileadtime, :, g].flatten(), qq_map[:, Ileadtime, g], qq_map[:, Iref, g])

                    reshaped = np.reshape(values, [ofile.variables[var].shape[0], ofile.variables[var].shape[2]])
                    data[:, Ileadtime, :, g] = reshaped[:]
        if debug:
            print("QQ forecast: %.1f" % (time.time() - t0))
        oncvar = ofile.variables[var]
        # Accumulate
        if var in var_acc:
            if debug:
                print("Accumulating")
            for i in range(1, data.shape[1]):
                data[:, i, ...] += data[:, i-1, ...]

        if debug:
            print("Writing to disk")
        if optimized_speed:
            oncvar[:] = data
        else:
            """
            To save memory, write each time separately and sync the file to disk
            """
            for i in range(data.shape[0]):
                #print("Writing %d" % i)
                oncvar[i, ...] = data[i, ...]
                ofile.sync()
        ofile.variables[var].calibration = func.__name__
        ofile.sync()

    # Add history string
    command = ' '.join(sys.argv[1:])
    history_str = "%s calibrate_db %s" % (datetime.datetime.utcnow().strftime('%Y-%m-%d %H:%M:%S +00:00'), command)
    if hasattr(ifile, "history"):
        history_str = [history_str, ifile.history]
    ofile.history = history_str

    ifile.close()
    ofile.close()


def addition(x, xx, yy):
    bias = np.mean(yy, dtype=np.float64) - np.mean(xx, dtype=np.float64)
    return x + bias


def multiplication(x, xx, yy):
    bias = np.mean(yy, dtype=np.float64) / np.mean(xx, dtype=np.float64)
    return x * bias


def quantile_mapping(x, xx, yy, min=None):
    """
    Arguments:
       x (np.array): x-axis values to interpolate to
       xx (np.array): x-axis control points
       yy (np.array): y-axis control points 
       min (float): Minimum value

    xx and yy must be sorted
   
    Returns:
       y (np.array): y-axis interpolated values
    """
    return np.interp(x, xx, yy)


if __name__ == "__main__":
    main()
