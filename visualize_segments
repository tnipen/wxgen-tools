#!/usr/bin/env python
import os
import sys
import numpy as np
import matplotlib.pylab as mpl
import argparse
import verif.util
import netCDF4
import wxgen
import datetime


def main():
    parser = argparse.ArgumentParser(description='')
    parser.add_argument('file', help='')
    parser.add_argument('-db', help='')

    if len(sys.argv) == 1:
        parser.print_help()
        sys.exit(1)

    args = parser.parse_args()
    file = netCDF4.Dataset(args.file, 'r')
    if "segment_time" not in file.variables or "segment_lead_time" not in file.variables:
        wxgen.util.error("File does not contain segment information (need to run wxgen with --write_indices)")
    segment_times = file.variables["segment_time"][:]
    segment_lead_times = file.variables["segment_lead_time"][:]

    db = netCDF4.Dataset(args.db, 'r')
    db_times = db.variables["time"][:]
    db_lead_times = db.variables["lead_time"][:]

    # plot1(segment_times, segment_lead_times)
    plot2(segment_times, segment_lead_times, db_times, db_lead_times)

    mpl.show()
    file.close()
    db.close()


def plot1(segment_times, segment_lead_times):
    Isegment = 0
    times = segment_time[:, Isegment]
    y = range(len(times))
    if 0:
        dates = [verif.util.unixtime_to_date(t) for t in times]
        x = [date // 100 % 100 for date in dates]
        mpl.plot(x, y, 'o')
    else:
        dates = [verif.util.date_to_datenum(verif.util.unixtime_to_date(t)) for t in times]
        x = dates
        mpl.plot(x, y, 'o')
        # mpl.gca().xaxis_date()


def plot2(segment_times, segment_lead_times, db_times, db_lead_times):
    s1 = segment_times.flatten()
    t1 = db_times.flatten()

    values = np.zeros([len(t1)], 'int')
    for i in range(len(t1)):
        values[i] = np.sum(t1[i] == s1)
        #Id = np.where(np.abs(t1[i] - s1) < 1)[0]
        # Il = np.where(np.abs(t2 - s2[i]) < 1)[0]
        #if(len(Id) == 1 and len(Il) == 1):
        #    values[Id, Il] += 1
        #values[i] = len(Id)
    print "min, median, max, std, x==0"
    print np.min(values), np.median(values), np.max(values),np.std(values), np.sum(values == 0)
    sys.exit()

    dates = np.array([verif.util.unixtime_to_date(int(t)) for t in segment_times.flatten()])
    years = dates // 10000
    dayofyear = get_day_of_year(segment_times.flatten())
    counts = dict()
    import time
    start_time = time.time()
    for i in range(len(dates)):
        index = (dates[i], dayofyear[i])
        if index not in counts:
            counts[index] = 0
        counts[index] = counts[index] + 1

    print verif.util.unixtime_to_date(int(segment_times[0, 0]))
    x = [i[1] for i in counts.keys()]
    y = [i[0] for i in counts.keys()]
    c = [i for i in counts.values()]
    print np.std(c)
    print "%.f s" % (time.time() - start_time)
    mpl.scatter(x, y, s=c)
    mpl.ylabel("Year")
    mpl.xlabel("Day of year")


def get_day_of_year(times):
    dts = [datetime.datetime.utcfromtimestamp(i) for i in times]
    dts = [d.replace(year=2000) for d in dts]
    return np.array([(x - datetime.datetime(year=2000, month=1, day=1)).days + 1 for x in dts])

if __name__ == "__main__":
    main()
