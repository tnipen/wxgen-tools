#!/usr/bin/env python
import os
import sys
import numpy as np
import matplotlib.pylab as mpl
import argparse
import verif.util
import netCDF4
from matplotlib.widgets import Button, RadioButtons


def main():
    parser = argparse.ArgumentParser(description='')
    parser.add_argument('file', help='')
    parser.add_argument('-clim', type=verif.util.parse_numbers, help='Colorbar limits', dest='clim')

    args = parser.parse_args()
    file = netCDF4.Dataset(args.file, 'r')
    latvar, lonvar = get_latlon_vars(file)
    lats = file.variables[latvar][:]
    lons = file.variables[lonvar][:]

    Itime = 0

    axdata = mpl.axes([0, 0, 0.6, 0.9])
    view = View(file, axdata)
    view.clim = args.clim
    axprev = mpl.axes([0.6, 0.05, 0.1, 0.075])
    axnext = mpl.axes([0.71, 0.05, 0.1, 0.075])
    axclose = mpl.axes([0.82, 0.05, 0.1, 0.075])
    bnext = Button(axnext, 'Next')
    bnext.on_clicked(view.next)
    bprev = Button(axprev, 'Prev')
    bprev.on_clicked(view.prev)
    bprev = Button(axprev, 'Prev')
    bprev.on_clicked(view.prev)
    bclose = Button(axclose, 'Close')
    bclose.on_clicked(view.close)
    variables = [var for var in file.variables if var not in ['time', 'latitude', 'longitude', 'projection_regular_ll', 'forecast_reference_time', 'altitude']]
    axvars = mpl.axes([0.62, 0.5, 0.1, len(variables)*0.075])
    axvars.set_axis_bgcolor([0,0,0,0])
    axvars.set_axis_off()
    bvars = RadioButtons(axvars, variables)
    for circle in bvars.circles:
        circle.set_radius(0.1)
    bvars.on_clicked(view.set_variable)
    view.set_variable(variables[0])

    mpl.show()

    file.close()


class View(object):
    index = 0
    def __init__(self, file, ax):
        self.file = file
        self.ax = ax
        self.p = None
        self.clim = None
        self.colorbar = None
        self.longitudes = self.file.variables['longitude'][:]
        self.latitudes = self.file.variables['latitude'][:]
        if 'time' in self.file.variables:
            self.times = self.file.variables['time'][:]
        else:
            self.times = [0]
        self.cmap = "RdBu_r"
    def next(self, event):
        self.index += 1
        self.draw()
    def prev(self, event):
        self.index -= 1
        self.draw()
    def close(self, event):
        sys.exit()

    def set_variable(self, event):
        self.variable = event
        if self.colorbar is not None:
            self.colorbar.remove()
        self.colorbar = None
        self.p = None
        self.draw()

    def draw(self):
        if self.index >= self.file.variables[self.variable].shape[0]:
            self.index = self.file.variables[self.variable].shape[0] - 1
        if self.index < 0:
            self.index = 0
        num_dims = len(self.file.variables[self.variable].shape)
        if num_dims == 3:
            data = self.file.variables[self.variable][self.index, 0, :]
        elif num_dims == 2:
            data = self.file.variables[self.variable][self.index, :]
        elif num_dims == 1:
            data = self.file.variables[self.variable][:]

        if self.p is None:
            if self.clim is None:
                min = np.nanpercentile(self.file.variables[self.variable][:], 1)
                max = np.nanpercentile(self.file.variables[self.variable][:], 99)
            else:
                min = self.clim[0]
                max = self.clim[1]
            self.p = self.ax.scatter(self.longitudes, self.latitudes, c=data, vmin=min, vmax=max, cmap=self.cmap)
        else:
            self.p.set_array(data)
        self.ax.set_title("Index: %d Time: %dT%02dZ" % (self.index,
            verif.util.unixtime_to_date(self.times[self.index]),
            self.times[self.index] / 3600 % 24))

        if self.colorbar is None:
            axcb = mpl.axes([0, 0.25, 0.03, 0.5])
            self.colorbar = mpl.colorbar(self.p, axcb)
        mpl.draw()


def get_latlon_vars(file):
    if 'latitude' in file.variables:
        latvar = 'latitude'
    elif 'lat' in file.variables:
        latvar = 'lat'
    if 'longitude' in file.variables:
        lonvar = 'longitude'
    elif 'lon' in file.variables:
        lonvar = 'lon'
    return latvar, lonvar


if __name__ == "__main__":
    main()
